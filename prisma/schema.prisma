generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String?        @unique
  emailVerified          DateTime?
  image                  String?
  bannerImage            String?
  bio                    String?
  location               String?
  website                String?
  password               String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  accounts               Account[]
  comments               Comment[]
  conversationsInitiated Conversation[] @relation("ConversationInitiator")
  conversationsReceived  Conversation[] @relation("ConversationReceiver")
  followedBy             Follow[]       @relation("Follower")
  following              Follow[]       @relation("Following")
  likes                  Like[]
  receivedMessages       Message[]      @relation("MessageReceiver")
  sentMessages           Message[]      @relation("MessageSender")
  posts                  Post[]
  sessions               Session[]
  shares                 Share[]        @relation("UserShares")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(cuid())
  content   String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  comments  Comment[]
  likes     Like[]
  shares    Share[]   @relation("PostShares")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Conversation {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  initiatorId   String
  receiverId    String
  lastMessageAt DateTime  @default(now())
  initiator     User      @relation("ConversationInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver      User      @relation("ConversationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  senderId       String
  receiverId     String
  conversationId String
  read           Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User         @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation("PostShares", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserShares", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}
